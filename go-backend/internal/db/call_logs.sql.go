// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: call_logs.sql

package db

import (
	"context"

	"github.com/google/uuid"
	"github.com/jackc/pgx/v5/pgtype"
)

const createCallLog = `-- name: CreateCallLog :one
INSERT INTO call_logs (
    user_id,
    voice_assistant_id,
    caller_number,
    call_duration,
    transcript,
    is_potentially_malicious
) VALUES (
    $1, $2, $3, $4, $5, $6
) RETURNING id, user_id, voice_assistant_id, caller_number, call_duration, transcript, is_potentially_malicious, created_at, updated_at
`

type CreateCallLogParams struct {
	UserID                 uuid.UUID   `json:"user_id"`
	VoiceAssistantID       pgtype.UUID `json:"voice_assistant_id"`
	CallerNumber           string      `json:"caller_number"`
	CallDuration           int32       `json:"call_duration"`
	Transcript             pgtype.Text `json:"transcript"`
	IsPotentiallyMalicious bool        `json:"is_potentially_malicious"`
}

func (q *Queries) CreateCallLog(ctx context.Context, arg CreateCallLogParams) (CallLog, error) {
	row := q.db.QueryRow(ctx, createCallLog,
		arg.UserID,
		arg.VoiceAssistantID,
		arg.CallerNumber,
		arg.CallDuration,
		arg.Transcript,
		arg.IsPotentiallyMalicious,
	)
	var i CallLog
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.VoiceAssistantID,
		&i.CallerNumber,
		&i.CallDuration,
		&i.Transcript,
		&i.IsPotentiallyMalicious,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const deleteCallLog = `-- name: DeleteCallLog :exec
DELETE FROM call_logs
WHERE id = $1
`

func (q *Queries) DeleteCallLog(ctx context.Context, id uuid.UUID) error {
	_, err := q.db.Exec(ctx, deleteCallLog, id)
	return err
}

const getCallLogByID = `-- name: GetCallLogByID :one
SELECT id, user_id, voice_assistant_id, caller_number, call_duration, transcript, is_potentially_malicious, created_at, updated_at FROM call_logs
WHERE id = $1
`

func (q *Queries) GetCallLogByID(ctx context.Context, id uuid.UUID) (CallLog, error) {
	row := q.db.QueryRow(ctx, getCallLogByID, id)
	var i CallLog
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.VoiceAssistantID,
		&i.CallerNumber,
		&i.CallDuration,
		&i.Transcript,
		&i.IsPotentiallyMalicious,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const listCallLogs = `-- name: ListCallLogs :many
SELECT id, user_id, voice_assistant_id, caller_number, call_duration, transcript, is_potentially_malicious, created_at, updated_at FROM call_logs
ORDER BY created_at DESC
LIMIT $1 OFFSET $2
`

type ListCallLogsParams struct {
	Limit  int32 `json:"limit"`
	Offset int32 `json:"offset"`
}

func (q *Queries) ListCallLogs(ctx context.Context, arg ListCallLogsParams) ([]CallLog, error) {
	rows, err := q.db.Query(ctx, listCallLogs, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []CallLog{}
	for rows.Next() {
		var i CallLog
		if err := rows.Scan(
			&i.ID,
			&i.UserID,
			&i.VoiceAssistantID,
			&i.CallerNumber,
			&i.CallDuration,
			&i.Transcript,
			&i.IsPotentiallyMalicious,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listCallLogsByUserID = `-- name: ListCallLogsByUserID :many
SELECT id, user_id, voice_assistant_id, caller_number, call_duration, transcript, is_potentially_malicious, created_at, updated_at FROM call_logs
WHERE user_id = $1
ORDER BY created_at DESC
LIMIT $2 OFFSET $3
`

type ListCallLogsByUserIDParams struct {
	UserID uuid.UUID `json:"user_id"`
	Limit  int32     `json:"limit"`
	Offset int32     `json:"offset"`
}

func (q *Queries) ListCallLogsByUserID(ctx context.Context, arg ListCallLogsByUserIDParams) ([]CallLog, error) {
	rows, err := q.db.Query(ctx, listCallLogsByUserID, arg.UserID, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []CallLog{}
	for rows.Next() {
		var i CallLog
		if err := rows.Scan(
			&i.ID,
			&i.UserID,
			&i.VoiceAssistantID,
			&i.CallerNumber,
			&i.CallDuration,
			&i.Transcript,
			&i.IsPotentiallyMalicious,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateCallLog = `-- name: UpdateCallLog :one
UPDATE call_logs
SET
    caller_number = $2,
    call_duration = $3,
    transcript = $4,
    is_potentially_malicious = $5,
    updated_at = NOW()
WHERE id = $1
RETURNING id, user_id, voice_assistant_id, caller_number, call_duration, transcript, is_potentially_malicious, created_at, updated_at
`

type UpdateCallLogParams struct {
	ID                     uuid.UUID   `json:"id"`
	CallerNumber           string      `json:"caller_number"`
	CallDuration           int32       `json:"call_duration"`
	Transcript             pgtype.Text `json:"transcript"`
	IsPotentiallyMalicious bool        `json:"is_potentially_malicious"`
}

func (q *Queries) UpdateCallLog(ctx context.Context, arg UpdateCallLogParams) (CallLog, error) {
	row := q.db.QueryRow(ctx, updateCallLog,
		arg.ID,
		arg.CallerNumber,
		arg.CallDuration,
		arg.Transcript,
		arg.IsPotentiallyMalicious,
	)
	var i CallLog
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.VoiceAssistantID,
		&i.CallerNumber,
		&i.CallDuration,
		&i.Transcript,
		&i.IsPotentiallyMalicious,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}
