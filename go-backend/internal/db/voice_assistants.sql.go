// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: voice_assistants.sql

package db

import (
	"context"

	"github.com/google/uuid"
)

const createVoiceAssistant = `-- name: CreateVoiceAssistant :one
INSERT INTO voice_assistants (
    user_id,
    assistant_name,
    phone_number
) VALUES (
    $1, $2, $3
) RETURNING id, user_id, assistant_name, phone_number, created_at, updated_at
`

type CreateVoiceAssistantParams struct {
	UserID        uuid.UUID `json:"user_id"`
	AssistantName string    `json:"assistant_name"`
	PhoneNumber   string    `json:"phone_number"`
}

func (q *Queries) CreateVoiceAssistant(ctx context.Context, arg CreateVoiceAssistantParams) (VoiceAssistant, error) {
	row := q.db.QueryRow(ctx, createVoiceAssistant, arg.UserID, arg.AssistantName, arg.PhoneNumber)
	var i VoiceAssistant
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.AssistantName,
		&i.PhoneNumber,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const deleteVoiceAssistant = `-- name: DeleteVoiceAssistant :exec
DELETE FROM voice_assistants
WHERE id = $1
`

func (q *Queries) DeleteVoiceAssistant(ctx context.Context, id uuid.UUID) error {
	_, err := q.db.Exec(ctx, deleteVoiceAssistant, id)
	return err
}

const getVoiceAssistantByID = `-- name: GetVoiceAssistantByID :one
SELECT id, user_id, assistant_name, phone_number, created_at, updated_at FROM voice_assistants
WHERE id = $1
`

func (q *Queries) GetVoiceAssistantByID(ctx context.Context, id uuid.UUID) (VoiceAssistant, error) {
	row := q.db.QueryRow(ctx, getVoiceAssistantByID, id)
	var i VoiceAssistant
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.AssistantName,
		&i.PhoneNumber,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const listVoiceAssistants = `-- name: ListVoiceAssistants :many
SELECT id, user_id, assistant_name, phone_number, created_at, updated_at FROM voice_assistants
ORDER BY created_at DESC
LIMIT $1 OFFSET $2
`

type ListVoiceAssistantsParams struct {
	Limit  int32 `json:"limit"`
	Offset int32 `json:"offset"`
}

func (q *Queries) ListVoiceAssistants(ctx context.Context, arg ListVoiceAssistantsParams) ([]VoiceAssistant, error) {
	rows, err := q.db.Query(ctx, listVoiceAssistants, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []VoiceAssistant{}
	for rows.Next() {
		var i VoiceAssistant
		if err := rows.Scan(
			&i.ID,
			&i.UserID,
			&i.AssistantName,
			&i.PhoneNumber,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listVoiceAssistantsByUserID = `-- name: ListVoiceAssistantsByUserID :many
SELECT id, user_id, assistant_name, phone_number, created_at, updated_at FROM voice_assistants
WHERE user_id = $1
ORDER BY created_at DESC
LIMIT $2 OFFSET $3
`

type ListVoiceAssistantsByUserIDParams struct {
	UserID uuid.UUID `json:"user_id"`
	Limit  int32     `json:"limit"`
	Offset int32     `json:"offset"`
}

func (q *Queries) ListVoiceAssistantsByUserID(ctx context.Context, arg ListVoiceAssistantsByUserIDParams) ([]VoiceAssistant, error) {
	rows, err := q.db.Query(ctx, listVoiceAssistantsByUserID, arg.UserID, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []VoiceAssistant{}
	for rows.Next() {
		var i VoiceAssistant
		if err := rows.Scan(
			&i.ID,
			&i.UserID,
			&i.AssistantName,
			&i.PhoneNumber,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateVoiceAssistant = `-- name: UpdateVoiceAssistant :one
UPDATE voice_assistants
SET
    assistant_name = $2,
    phone_number = $3,
    updated_at = NOW()
WHERE id = $1
RETURNING id, user_id, assistant_name, phone_number, created_at, updated_at
`

type UpdateVoiceAssistantParams struct {
	ID            uuid.UUID `json:"id"`
	AssistantName string    `json:"assistant_name"`
	PhoneNumber   string    `json:"phone_number"`
}

func (q *Queries) UpdateVoiceAssistant(ctx context.Context, arg UpdateVoiceAssistantParams) (VoiceAssistant, error) {
	row := q.db.QueryRow(ctx, updateVoiceAssistant, arg.ID, arg.AssistantName, arg.PhoneNumber)
	var i VoiceAssistant
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.AssistantName,
		&i.PhoneNumber,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}
