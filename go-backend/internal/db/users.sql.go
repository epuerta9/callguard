// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: users.sql

package db

import (
	"context"

	"github.com/google/uuid"
)

const createUser = `-- name: CreateUser :one
INSERT INTO users (
    name,
    email,
    password_hash
) VALUES (
    $1, $2, $3
) RETURNING id, name, email, password_hash, created_at, updated_at, metadata
`

type CreateUserParams struct {
	Name         string `json:"name"`
	Email        string `json:"email"`
	PasswordHash string `json:"password_hash"`
}

func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) (User, error) {
	row := q.db.QueryRow(ctx, createUser, arg.Name, arg.Email, arg.PasswordHash)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Email,
		&i.PasswordHash,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Metadata,
	)
	return i, err
}

const deleteUser = `-- name: DeleteUser :exec
DELETE FROM users
WHERE id = $1
`

func (q *Queries) DeleteUser(ctx context.Context, id uuid.UUID) error {
	_, err := q.db.Exec(ctx, deleteUser, id)
	return err
}

const deleteUserMetadataField = `-- name: DeleteUserMetadataField :one
UPDATE users
SET metadata = metadata - $2
WHERE id = $1
RETURNING id, name, email, password_hash, created_at, updated_at, metadata
`

type DeleteUserMetadataFieldParams struct {
	ID       uuid.UUID `json:"id"`
	Metadata []byte    `json:"metadata"`
}

func (q *Queries) DeleteUserMetadataField(ctx context.Context, arg DeleteUserMetadataFieldParams) (User, error) {
	row := q.db.QueryRow(ctx, deleteUserMetadataField, arg.ID, arg.Metadata)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Email,
		&i.PasswordHash,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Metadata,
	)
	return i, err
}

const getUserByEmail = `-- name: GetUserByEmail :one
SELECT id, name, email, password_hash, created_at, updated_at, metadata FROM users
WHERE email = $1
`

func (q *Queries) GetUserByEmail(ctx context.Context, email string) (User, error) {
	row := q.db.QueryRow(ctx, getUserByEmail, email)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Email,
		&i.PasswordHash,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Metadata,
	)
	return i, err
}

const getUserByID = `-- name: GetUserByID :one
SELECT id, name, email, password_hash, created_at, updated_at, metadata FROM users
WHERE id = $1
`

func (q *Queries) GetUserByID(ctx context.Context, id uuid.UUID) (User, error) {
	row := q.db.QueryRow(ctx, getUserByID, id)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Email,
		&i.PasswordHash,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Metadata,
	)
	return i, err
}

const getUserMetadata = `-- name: GetUserMetadata :one
SELECT metadata
FROM users
WHERE id = $1
`

func (q *Queries) GetUserMetadata(ctx context.Context, id uuid.UUID) ([]byte, error) {
	row := q.db.QueryRow(ctx, getUserMetadata, id)
	var metadata []byte
	err := row.Scan(&metadata)
	return metadata, err
}

const listUsers = `-- name: ListUsers :many
SELECT id, name, email, password_hash, created_at, updated_at, metadata FROM users
ORDER BY created_at DESC
LIMIT $1 OFFSET $2
`

type ListUsersParams struct {
	Limit  int32 `json:"limit"`
	Offset int32 `json:"offset"`
}

func (q *Queries) ListUsers(ctx context.Context, arg ListUsersParams) ([]User, error) {
	rows, err := q.db.Query(ctx, listUsers, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []User{}
	for rows.Next() {
		var i User
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Email,
			&i.PasswordHash,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.Metadata,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const setUserMetadataField = `-- name: SetUserMetadataField :one
UPDATE users
SET metadata = jsonb_set(
    COALESCE(metadata, '{}'::jsonb),
    ARRAY[$2],
    $3::jsonb,
    true
)
WHERE id = $1
RETURNING id, name, email, password_hash, created_at, updated_at, metadata
`

type SetUserMetadataFieldParams struct {
	ID      uuid.UUID   `json:"id"`
	Column2 interface{} `json:"column_2"`
	Column3 []byte      `json:"column_3"`
}

func (q *Queries) SetUserMetadataField(ctx context.Context, arg SetUserMetadataFieldParams) (User, error) {
	row := q.db.QueryRow(ctx, setUserMetadataField, arg.ID, arg.Column2, arg.Column3)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Email,
		&i.PasswordHash,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Metadata,
	)
	return i, err
}

const updateUser = `-- name: UpdateUser :one
UPDATE users
SET
    name = $2,
    email = $3,
    password_hash = $4,
    updated_at = NOW()
WHERE id = $1
RETURNING id, name, email, password_hash, created_at, updated_at, metadata
`

type UpdateUserParams struct {
	ID           uuid.UUID `json:"id"`
	Name         string    `json:"name"`
	Email        string    `json:"email"`
	PasswordHash string    `json:"password_hash"`
}

func (q *Queries) UpdateUser(ctx context.Context, arg UpdateUserParams) (User, error) {
	row := q.db.QueryRow(ctx, updateUser,
		arg.ID,
		arg.Name,
		arg.Email,
		arg.PasswordHash,
	)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Email,
		&i.PasswordHash,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Metadata,
	)
	return i, err
}

const updateUserMetadata = `-- name: UpdateUserMetadata :one
UPDATE users
SET metadata = COALESCE(metadata, '{}'::jsonb) || $2
WHERE id = $1
RETURNING id, name, email, password_hash, created_at, updated_at, metadata
`

type UpdateUserMetadataParams struct {
	ID       uuid.UUID `json:"id"`
	Metadata []byte    `json:"metadata"`
}

func (q *Queries) UpdateUserMetadata(ctx context.Context, arg UpdateUserMetadataParams) (User, error) {
	row := q.db.QueryRow(ctx, updateUserMetadata, arg.ID, arg.Metadata)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Email,
		&i.PasswordHash,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Metadata,
	)
	return i, err
}
